<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tips | Mario's Blog]]></title>
  <link href="http://mariostallone.github.io/blog/categories/tips/atom.xml" rel="self"/>
  <link href="http://mariostallone.github.io/"/>
  <updated>2017-02-28T02:11:41+05:30</updated>
  <id>http://mariostallone.github.io/</id>
  <author>
    <name><![CDATA[Mario Stallone]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Singleton in Objective C]]></title>
    <link href="http://mariostallone.github.io/blog/2013/01/15/the-singleton-in-objective-c/"/>
    <updated>2013-01-15T11:49:13+05:30</updated>
    <id>http://mariostallone.github.io/blog/2013/01/15/the-singleton-in-objective-c</id>
    <content type="html"><![CDATA[<p>In my previous <a href="http://mariostallone.com/blog/2013/01/14/design-patterns-singleton/">post</a> I had mentioned a code example on how to write a Singleton in Objective C. I had a friend ask me, what would happen when I call an alloc init over my Singleton?</p>

<p>This got me thniking, so I did my fair share of research on the topic, and came up with a few conclusions.
There is no way to restrict the calling of the init method(like in Java). But, we still want to maintain only one instance. Of course, the easiest solution would be, just to remember that we are using a Singleton :-) But, often enough this is not the case, and when working in large teams, theres always a chance of making a mistake. So here are two methods by which we can ensure the creation of one and only one instance of the class</p>

<ul>
<li>Restrict creation of another object of the same class</li>
<li>Raise an exception when an unnecessary retain or release call is encountered</li>
</ul>


<p><strong>Restricting the creation of another object</strong>
My code would have to be modified by adding another method&hellip;
<figure class='code'><figcaption><span>Singleton.m </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">import</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Singleton</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@implementation</span> <span class="nc">Singleton</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">static</span> <span class="kt">id</span> <span class="n">_sharedInstnace</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;+</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">initialize</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">sharedInstnace</span><span class="o">==</span><span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">sharedInstnace</span> <span class="o">=</span> <span class="p">[[</span><span class="nb">self</span> <span class="n">alloc</span><span class="p">]</span><span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;+</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nl">allocWithZone</span><span class="p">:(</span><span class="n">NSZone</span> <span class="o">*</span><span class="p">)</span><span class="n">zone</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">sharedInstnace</span><span class="o">==</span><span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">sharedInstnace</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="nl">allocWithZone</span><span class="p">:</span><span class="n">zone</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_sharedInstnace</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;+</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">sharedInstance</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_sharedInstnace</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The <em>allocWithZone:</em> method is what allocates memory to the object. Hence overriding this to point it back to the same object will prevent other instances of the object from being created.
This of course, ensures that, when a developer calls <em>alloc init</em> on the class, the same instance is returned. This makes the developer oblivious to the fact that he/she is using a Singleton.
If we want to be mindful of our actions, Id suggest the next option.</p>

<p><strong>Raising an exception when an unnecessary retain is called</strong>
<figure class='code'><figcaption><span>Singleton.m </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">import</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Singleton</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@implementation</span> <span class="nc">Singleton</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">static</span> <span class="kt">id</span> <span class="n">_sharedInstnace</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;+</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">initialize</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">sharedInstnace</span><span class="o">==</span><span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">sharedInstnace</span> <span class="o">=</span> <span class="p">[[</span><span class="nb">self</span> <span class="n">alloc</span><span class="p">]</span><span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;+</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nl">allocWithZone</span><span class="p">:(</span><span class="n">NSZone</span> <span class="o">*</span><span class="p">)</span><span class="n">zone</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">sharedInstnace</span><span class="o">!=</span><span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="bp">NSException</span> <span class="nl">raise</span><span class="p">:@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Explicit</span> <span class="n">Object</span> <span class="n">Creation</span> <span class="n">not</span> <span class="n">allowed</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="nl">format</span><span class="p">:@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%</span><span class="p">@</span> <span class="n">is</span> <span class="n">a</span> <span class="n">Singleton</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,[</span><span class="nb">self</span> <span class="k">class</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">sharedInstnace</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="nl">allocWithZone</span><span class="p">:</span><span class="n">zone</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_sharedInstnace</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;+</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">sharedInstance</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_sharedInstnace</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This way you would have an exception raised every time you try to instantiate a Singleton</p>

<p>Notice, that in both these snippets, I have left the Object creation to a new method
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+(</span><span class="kt">void</span><span class="p">)</span><span class="nf">initialize</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>
From the Developer Library&hellip;</p>

<p><blockquote><p>The runtime sends initialize to each class in a program exactly one time just before the class, or any class that inherits from it, is sent its first message from within the program. (Thus the method may never be invoked if the class is not used.) The runtime sends the initialize message to classes in a thread-safe manner. Superclasses receive this message before their subclasses.</p></blockquote></p>

<p>So by calling this method to create our Singleton&rsquo;s instance, we make sure we call it only when the Class is first called.</p>

<p>And <em>dispatch_once</em> ensures that any code within this block is executed only once</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design Patterns - Singleton]]></title>
    <link href="http://mariostallone.github.io/blog/2013/01/14/design-patterns-singleton/"/>
    <updated>2013-01-14T13:35:04+05:30</updated>
    <id>http://mariostallone.github.io/blog/2013/01/14/design-patterns-singleton</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s my second post on Design Patterns. So, this post is going to throw some light on the Singleton Patterns.</p>

<blockquote>In software engineering, the **Singleton Pattern** is a design pattern that restricts the instantiation of a class to one object</blockquote>


<p>So one might wonder why would you need to implement a Singleton?
There are many scenarios where we&rsquo;d rather have just one instance of a particular class.
For eg.</p>

<ul>
<li>The class which instantiates the DB connection</li>
<li>It can be used as a replacement to a Global Variable</li>
</ul>


<p>Here are some of the advantages of using a Singleton</p>

<ul>
<li>Only one instance of the class will exist</li>
<li>This saves up on memory</li>
<li>Allows one to share data amongst classes without actually passing around objects</li>
</ul>


<p>Here are a few examples where you must have used a Singleton</p>

<p><figure class='code'><figcaption><span>linenos:false </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">exec</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="o">{&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">echo</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">Hello</span><span class="o">,</span> <span class="n">world</span><span class="o">!&amp;</span><span class="n">rdquo</span><span class="o">;});</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>linenos:false </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="bp">UIApplication</span> <span class="n">sharedApplication</span><span class="p">].</span><span class="n">delegate</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Here&rsquo;s an implementation of the <strong>Singleton</strong> Pattern in Java</p>

<p><figure class='code'><figcaption><span>Singleton.java </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">instance</span><span class="o">==</span><span class="kc">null</span><span class="o">)</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="n">instance</span><span class="o">=</span><span class="k">new</span> <span class="nf">Singleton</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>And here&#8217;a an implementation in Objective C</p>

<p><figure class='code'><figcaption><span>Singleton.h </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">import</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Foundation</span><span class="o">/</span><span class="n">Foundation</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@interface</span> <span class="nc">Singleton</span> : <span class="bp">NSObject</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;+</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">sharedInstance</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>Singleton.m </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">import</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Singleton</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">static</span> <span class="kt">id</span> <span class="n">_sharedInstance</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@implementation</span> <span class="nc">Singleton</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;+</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">initialize</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">sharedInstnace</span><span class="o">==</span><span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">sharedInstnace</span> <span class="o">=</span> <span class="p">[[</span><span class="nb">self</span> <span class="n">alloc</span><span class="p">]</span><span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;+</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">sharedInstance</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_sharedInstnace</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>So thats how you make use of Singletons. This is one Design Pattern you will use on a regular basis.
Will update this article with more samples and issues related to thread safe creation of singletons.</p>

<p>EDIT : Added a slightly better way to manage Singletons in Objective C. A more detailed explanation and variations to this can be found in the next post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design Patterns]]></title>
    <link href="http://mariostallone.github.io/blog/2012/10/21/design-patterns/"/>
    <updated>2012-10-21T09:55:27+05:30</updated>
    <id>http://mariostallone.github.io/blog/2012/10/21/design-patterns</id>
    <content type="html"><![CDATA[<p>Most of you in the Software Development Industry must have at some time or the other heard the term <strong>Design Patterns . </strong>Well, I heard this a while back from a few friends. Design Patterns was originally conceived by <a href="http://en.wikipedia.org/wiki/Erich_Gamma">Gamma, Erich</a>; <a href="http://en.wikipedia.org/w/index.php?title=Richard_Helm&amp;action=edit&amp;redlink=1">Richard Helm</a>, <a href="http://en.wikipedia.org/wiki/Ralph_Johnson_(computer_scientist">Ralph Johnson</a>), and <a href="http://en.wikipedia.org/wiki/John_Vlissides">John Vlissides</a>  in their book <em><a href="http://en.wikipedia.org/wiki/Design_Patterns_(book">Design Patterns: Elements of Reusable Object-Oriented Software</a>).</em></p>

<p>To be brief, Design Patterns are a collection of approaches to Designing software applications that enable reuse and extensibility. It&rsquo;s a more Object Oriented way of writing code, that is structured, well written, well understood and most importantly highly extendable and reusable.</p>

<p>Now, many of you might wonder, why must your code be extendable?
We work in an industry thats driven by Clients&#8217;requirements. And mind you, these requirements hardly freeze that easily. Well you might say, if you were to follow the waterfall methodology of Software Design, where does change in Software requirements occur. Truth is, in all practicality, the waterfall model cannot be followed all the time, and even if it were to be followed, an iteration over the code to add a new feature, must be made with minimal change to the existing code base.</p>

<p>Most articles I&rsquo;ve found these days about good programming spring from the Agile, TDD and XP Community. They&rsquo;ve inspired me to write better code, and well, I must say I&rsquo;ve grown to like their style of development too.</p>

<p>Here are some of the ideals I try to follow, they&rsquo;re not in any order, just random stuff I do while writing code.</p>

<ul>
<li>Do not use <strong>else</strong>

<ul>
<li>I try real hard to avoid the else statement. When I first heard this from Object Calisthenics, I found it weird  but slowly grew to realize that I realize that I didnt need it. A simple <strong>return </strong>or <strong>continue</strong> could easily replace an <strong>else.</strong></li>
</ul>
</li>
<li>Only one level of <strong>Indentation</strong></li>
<li>Good method names</li>
<li>Let a method perform one task and only one task</li>
<li>Break down taks into Classes, give each class a <strong>Single </strong><strong>Responsibility</strong></li>
<li>Use helper methods to perform tasks such as formatting text, etc.</li>
</ul>


<p>When I started writing code, I use to have this notion that my code must not be understood by others, that made my code complex and better!</p>

<p>Now, Ive grown to realize that, the easier my code is to be understood, the better it is.</p>

<p>Coming back to my initial topic of discussion, I find that Design Patterns help me write better code. We might have some point of time used many of these patterns, but without giving them a proper name.</p>

<p>Well, the Gang of Four, have taken the trouble to pen these down and have given a name for each of them. Now, the Gang of Four are not the only ones who documented them, they are the most acknowledged and one of the first to do so. SInce I acknowledge them, I will be using them as a reference and I shall also add a few more that I find or come across.</p>

<p><strong>Creational Design Patterns</strong></p>

<ul>
<li>Abstract Factory</li>
<li>Builder</li>
<li>Factory Method</li>
<li>Object Pool</li>
<li>Prototype</li>
<li>Singleton</li>
</ul>


<p><strong>Structural Patterns</strong></p>

<ul>
<li>Adapter</li>
<li>Bridge</li>
<li>Composite</li>
<li>Decorator</li>
<li>Facade</li>
<li>Flyweight</li>
<li>Proxy</li>
</ul>


<p><strong>Behavioral Patterns</strong></p>

<ul>
<li>Chain of Responsibility</li>
<li>Command Interpreter</li>
<li>Iterator</li>
<li>Mediator</li>
<li>Memento</li>
<li>Observer</li>
<li>State</li>
<li>Strategy</li>
<li>Template Method</li>
<li>Visitor</li>
</ul>


<p>Now why am I telling you all of this. Well, I intend on going through all these 22 patterns via code examples over a span of (hopefully) 22days :-)</p>

<p>So, I&rsquo;m going to document my understanding via Code Examples, etc. Each Pattern will have its own post.</p>

<p>Code examples will be posted to github and can be browsed through via my github handle -> <a href="https://github.com/mariostallone">Github</a></p>

<p>So ciao for now, see you in the next post.</p>

<p>PS : I&rsquo;m not going in any order</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bad Roads and the Contractors who built them]]></title>
    <link href="http://mariostallone.github.io/blog/2012/09/29/bad-roads-and-the-contractors-who-built-them/"/>
    <updated>2012-09-29T23:57:00+05:30</updated>
    <id>http://mariostallone.github.io/blog/2012/09/29/bad-roads-and-the-contractors-who-built-them</id>
    <content type="html"><![CDATA[<p>Back here in India, we are prone to finding bad roads, with potholes. Usually, once the road has been newly laid, its all neat and really great to drive on. A few rains, a few months later, there are pot holes everywhere! The only plausible explanation is the quality of tar and other material used to lay the road. And the people to blame are the Contractors. Most Contractors in a bid to make money use poor quality material to get the road laid.</p>

<p>Once the bad road has been laid, and after a good load of people have suffered using them, they start off with patch work, this is usually taken up by a different contractor (The old contractor cant be trusted anymore). Now, patch work is never good, there are odd lumps on the road, and the drive, though not as bad as the previous one with the potholes, is still not great.</p>

<p>We wait a little while longer, there are more potholes, and this time even the patch work has started to wear off. Now people have to lay a fresh road. And once again the vicious cycle continues.</p>

<p>When I was riding by today on a bad road, it chanced by my mind. Isn’t that exactly what we see here, in the software industry. We usually get projects wherein we find that the code has been really badly written, and we are given the task of fixing it. Or in some cases, bad code which we have written, ends up in another person’s kitty to clean up.</p>

<p>Why do we write bad code? Aren’t we also like these bad road contractors? Getting some one to clean up our mess, or get it in a state bad enough that it has to be re written from scratch?</p>

<p>People think its a headache to use the write design pattern, that breaking down our objects in to smaller, more usable objects is just some big daunting task. Or for that matter, using the right variable name, or closing that curly brace properly is just too much to do. I keep telling people that code should look beautiful.</p>

<p>Code, to us programmers is like how a painting is to an artist. Unless it looks beautiful and magnificent, it’s just not complete. We’re not experts or gurus to just weave out great code, but even a small effort such as using the right variable names, using the right code wrapping style, breaking down your objects into more smaller, manageable objects is surely going to go a great deal in making your code better, more maintainable and more extensible.</p>

<p>Writing code that works is not the right approach. But writing good code, that works, efficiently and allows for extension in the future is the right approach.</p>

<p>I was introduced to Design Patterns by two friends, <a href="https://twitter.com/senkumarv" title="Senthil">Senthil</a> and <a href="https://twitter.com/kumaranvram" title="Kumaran">Kumaran</a>. Ever since, I find myself trying to write better code. I know I still have a long way to go. I want to be a great Road Contractor. And I know that spending that extra time to get my code look beautiful, is going to get me there.</p>

<p>Other Resources that I&rsquo;ve found of really great use</p>

<ul>
<li>Object Calisthenics, an idea suggested by Jeff Bay in <a href="http://www.amazon.co.uk/ThoughtWorks-Anthology-Technology-Innovation-Programmers/dp/193435614X/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1225966906&amp;sr=8-1" title="The ThoughtWorks Anthology">The ThoughtWorks Anthology</a></li>
<li>Design Patterns, by the Gang of Four</li>
<li>The Passionate Programmer, by <a href="http://chadfowler.com/" title="Chad Fowler">Chad Fowler</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Naive Programmer's guide to Git]]></title>
    <link href="http://mariostallone.github.io/blog/2012/01/21/a-naive-programmers-guide-to-git/"/>
    <updated>2012-01-21T19:16:00+05:30</updated>
    <id>http://mariostallone.github.io/blog/2012/01/21/a-naive-programmers-guide-to-git</id>
    <content type="html"><![CDATA[<p>Git is a version control system. More specifically it’s a distributed version control system.</p>

<p>For those of you who don’t know hat versioning is. Here’s a small anecdote to get you up to speed.</p>

<p>I was working in a project where I was the developer and I had a fellow team mate testing my code.
I used to complete my code and  inform him of the updates and ask him to proceed with the testing.
This was what he used to do.
Download the latest version of the code into a folder with the current date as its name.
Test the code and then let me know of any bugs.</p>

<p>This was his folder structure
Proj<XYZ>
|<em> 1st Jan
|</em> 2nd Jan
|_ 3rd Jan
and so on.</p>

<p>He was manually keeping a log of updated code at every stage. Don’t you think this was kind of redundant ant time consuming?
This is where version control kicks in.
Imagine a scenario where in, I can code, update my changes and add it as a commit to my remote repository.
Inform the tester about the updates, he/she does a checkout of the latest version of the code. Adds review comments to the commit. I read those comments, make the changes and then commit my changes.
Makes more sense doesn’t it?
Well Git is one such tool, which I’ve grown to love. I must thank my friend <a href="https://twitter.com/senkumarv" title="Senthil">Senthil</a> for introducing me to Git.</p>

<p>If your on Windows, you need to download and install git. (Link)
Mac comes with git preinstalled :-)
Edit : I’m so used to having Xcode installed on any Mac that I thought Git actually came pre installed with Mac. Correction, it doesn’t, and must be installed from here (<a href="https://developer.apple.com/downloads" title="Downloads">Command Line Tools</a>) or via HomeBrew as suggested by my friend <a href="http://akash.im/" title="Akash">Akash</a>.
Linux, download and install (<a href="http://git-scm.com/download" title="Link">Link</a>)</p>

<p>If your adding git support to an existing project</p>

<ol>
<li>Navigate to your source directory.</li>
<li>Type
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git init</span></code></pre></td></tr></table></div></figure></li>
<li>It initializes an empty repository</li>
<li>Next, type
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .</span></code></pre></td></tr></table></div></figure></li>
<li>This adds all the current files to git</li>
<li>Next, type
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git commit –a –m &ldquo;Initial Commit&rdquo; # Or whatever message you find suitable</span></code></pre></td></tr></table></div></figure></li>
</ol>


<p>If your starting a new project</p>

<ol>
<li>Create a new directory</li>
<li>And follow steps from 2 to 9 from above</li>
<li>The only differences will be, as and when you add new files, they aren’t tracked by git by default.</li>
<li>You need to add them by typing in
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .</span></code></pre></td></tr></table></div></figure></li>
</ol>


<p>Next, I&rsquo;ll talk about adding remote support.
Remote support works best in a Unix environment</p>

<ol>
<li>Create a new folder in your remote machine as <FolderName>.git. The.git is not mandatory.</li>
<li>Then key in
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git init –-bare</span></code></pre></td></tr></table></div></figure></li>
<li>This initializes a bare repository</li>
<li>Head over to your machine and navigate to the project folder</li>
<li>Key in
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git remote add origin &lt;username>@&lt;host>:&lt;path></span></code></pre></td></tr></table></div></figure></li>
<li>This adds a remote using ssh to your git repository</li>
<li>Once done. Key in
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git push origin master</span></code></pre></td></tr></table></div></figure></li>
<li>You’ll be asked for credentials, supply the same. You can skip this by using ssh keys.</li>
<li>As and when you make changes to one of your Local copies, commit and then push to the remote.</li>
</ol>


<p>That’s it. Git is cool to use, and its even cooler to share your code to others via sites like <a href="https://github.com" title="github">github</a>, <a href="http://gitorious.org" title="gitorious">gitorious</a>, etc.</p>
]]></content>
  </entry>
  
</feed>
